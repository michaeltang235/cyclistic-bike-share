/*
----------------------------------------------
-- This script reads data from two processed  tables from database,
-- 'trip_data_proc' and 'trip_data_station_name_proc'.

-- From table 'trip_data_proc', 'ride_length' is grouped
-- by the following column name(s), and output the corresponding sub-table 
-- to database,
-- month, called it stat_month,
-- day_of_week, called it stat_day_of_week,
-- hour_of_day, called it stat_hour_of_day,
-- member_casual, called it stat_user,
-- member_casual and month, called it stat_user_month,
-- member_casual and day_of_week, called it stat_user_day_of_week,
-- member_casual and hour_of_day, called it stat_user_hour_of_day.
-- member_causal and rideable_type, called it stat_user_rideable_type

-- From table, 'trip_data_station_name_proc', ride count percentage of every 
-- rider type in every station was obtained. Output tables were generated by 
-- sorting the ride count perct in descending order for each rider type. 
-- Note, only stations with ride count >= mean ride count
-- of each rider type were included in the output tables.

----------------------------------------------
*/

-- drop tables if they already exist in database
DROP TABLE IF EXISTS `my-project-41210.bike_share.stat_month`;
DROP TABLE IF EXISTS `my-project-41210.bike_share.stat_day_of_week`;
DROP TABLE IF EXISTS `my-project-41210.bike_share.stat_hour_of_day`;
DROP TABLE IF EXISTS `my-project-41210.bike_share.stat_user`;
DROP TABLE IF EXISTS `my-project-41210.bike_share.stat_user_month`;
DROP TABLE IF EXISTS `my-project-41210.bike_share.stat_user_day_of_week`;
DROP TABLE IF EXISTS `my-project-41210.bike_share.stat_user_hour_of_day`;
DROP TABLE IF EXISTS `my-project-41210.bike_share.stat_user_rideable_type`;
DROP TABLE IF EXISTS `my-project-41210.bike_share.stat_casual_station_filtered_sorted`;
DROP TABLE IF EXISTS `my-project-41210.bike_share.stat_member_station_filtered_sorted`;


-- get stats by month, store results to table, stat_month
-- sort rows using the sequence of months shown in original .csv
-- files in database, i.e. 11, 12, 1, 2, 3, 4
CREATE TABLE `my-project-41210.bike_share.stat_month` AS
SELECT month_of_year, 
  AVG(ride_length) AS mean_ride_length, 
  MAX(ride_length) AS max_ride_length, 
  COUNT(ride_length) AS ride_count
FROM `my-project-41210.bike_share.trip_data_proc`
GROUP BY month_of_year
ORDER BY (CASE 
            WHEN month_of_year = 11 THEN 1
            WHEN month_of_year = 12 THEN 2
            WHEN month_of_year = 1 THEN 3
            WHEN month_of_year = 2 THEN 4
            WHEN month_of_year = 3 THEN 5
            WHEN month_of_year = 4 THEN 6
          END) ASC
;


-- get stats by day of week when trip started
-- custom sort day_of_week to match with .csv made
-- by Python and R, where day_of_week starts on monday
-- (here in SQL, monday = 2) and ends on 
-- sunday (here in SQL, sunday = 1).
-- store results to table, stat_day_of_week
CREATE TABLE `my-project-41210.bike_share.stat_day_of_week` AS
SELECT day_of_week, 
  AVG(ride_length) AS mean_ride_length, 
  MAX(ride_length) AS max_ride_length, 
  COUNT(ride_length) AS ride_count
FROM `my-project-41210.bike_share.trip_data_proc`
GROUP BY day_of_week
ORDER BY (CASE
            WHEN day_of_week = 1 THEN 7
          END) ASC
;


-- get stats by hour of when trip started, store results 
-- to table, stat_hour_of_day
CREATE TABLE `my-project-41210.bike_share.stat_hour_of_day` AS
SELECT hour_of_day, 
  AVG(ride_length) AS mean_ride_length, 
  MAX(ride_length) AS max_ride_length, 
  COUNT(ride_length) AS ride_count
FROM `my-project-41210.bike_share.trip_data_proc`
GROUP BY hour_of_day
ORDER BY hour_of_day ASC;


-- get stats by user type, store results to table, stat_user
CREATE TABLE `my-project-41210.bike_share.stat_user` AS
SELECT member_casual, 
  AVG(ride_length) AS mean_ride_length, 
  MAX(ride_length) AS max_ride_length, 
  COUNT(ride_length) AS ride_count
FROM `my-project-41210.bike_share.trip_data_proc`
GROUP BY member_casual;


-- get stats by user type and month, store results to 
-- table, stat_user_month, sort month_of_year in the 
-- following order, [11, 12, 1, 2, 3, 4]
CREATE TABLE `my-project-41210.bike_share.stat_user_month` AS
SELECT member_casual, 
  month_of_year,
  AVG(ride_length) AS mean_ride_length, 
  MAX(ride_length) AS max_ride_length, 
  COUNT(ride_length) AS ride_count
FROM `my-project-41210.bike_share.trip_data_proc`
GROUP BY member_casual, month_of_year
ORDER BY member_casual ASC, (CASE 
            WHEN month_of_year = 11 THEN 1
            WHEN month_of_year = 12 THEN 2
            WHEN month_of_year = 1 THEN 3
            WHEN month_of_year = 2 THEN 4
            WHEN month_of_year = 3 THEN 5
            WHEN month_of_year = 4 THEN 6
          END) ASC
;


-- get stats by user type and day of week
-- sunday = 1, saturday = 7, store results to 
-- table, stat_user_day_of_week
CREATE TABLE `my-project-41210.bike_share.stat_user_day_of_week` AS
SELECT member_casual, 
  day_of_week,
  AVG(ride_length) AS mean_ride_length, 
  MAX(ride_length) AS max_ride_length, 
  COUNT(ride_length) AS ride_count
FROM `my-project-41210.bike_share.trip_data_proc`
GROUP BY member_casual, day_of_week
ORDER BY member_casual ASC, (CASE
            WHEN day_of_week = 1 THEN 7
          END) ASC
;


-- get stats by user type and hour of day, store results
-- to table, stat_user_hour_of_day, 
CREATE TABLE `my-project-41210.bike_share.stat_user_hour_of_day` AS
SELECT member_casual, 
  hour_of_day,
  AVG(ride_length) AS mean_ride_length, 
  MAX(ride_length) AS max_ride_length, 
  COUNT(ride_length) AS ride_count
FROM `my-project-41210.bike_share.trip_data_proc`
GROUP BY member_casual, hour_of_day
ORDER BY member_casual ASC, hour_of_day ASC;


-- get stats by user type and rideable type, store results to 
-- table, stat_user_rideable_type
CREATE TABLE `my-project-41210.bike_share.stat_user_rideable_type` AS
SELECT member_casual, 
  rideable_type,
  COUNT(ride_length) AS ride_count
FROM `my-project-41210.bike_share.trip_data_proc`
GROUP BY member_casual, rideable_type
ORDER BY member_casual ASC, rideable_type ASC;


-- get ride count percentage (in descending order) of each rider type 
-- in every station:

-- start by creating temp table, user_station_merged, using two 
-- subsets of trip_data_station_name_proc, one obtained with only 
-- data from casual riders and the other with only data from member 
-- riders.
-- use inner join to combine the two subsets with common start_station_name

CREATE TEMP TABLE user_station_merged AS
SELECT *
FROM 
(SELECT member_casual AS member_casual_casual, 
  start_station_name AS start_station_name_casual, 
  COUNT(start_station_name) AS ride_count_casual
FROM `my-project-41210.bike_share.trip_data_station_name_proc`
WHERE member_casual = 'casual'
GROUP BY member_casual, start_station_name) AS casual_t
INNER JOIN
(SELECT member_casual AS member_casual_member,
  start_station_name AS start_station_name_member, 
  COUNT(start_station_name) AS ride_count_member
FROM `my-project-41210.bike_share.trip_data_station_name_proc`
WHERE member_casual = 'member'
GROUP BY member_casual, start_station_name) AS member_t
ON casual_t.start_station_name_casual = member_t.start_station_name_member;

-- create temp table, user_station_filtered, which contains all 
-- columns of user_station_merged, but with additional columns of 
-- ride_count_perct_casual = ride_count of casual riders/total ride count and
-- ride_count_perct_member = ride_count of member riders/total ride count at
-- every start station.
-- Also, only start stations with ride counts >= mean ride
-- count of each rider type are considered

CREATE TEMP TABLE user_station_filtered AS
SELECT *, 
  ride_count_casual/(ride_count_casual + ride_count_member) AS ride_count_perct_casual,
  ride_count_member/(ride_count_casual + ride_count_member) AS ride_count_perct_member
FROM user_station_merged
WHERE ride_count_casual >= (SELECT AVG(ride_count_casual) FROM user_station_merged)
AND ride_count_member >= (SELECT AVG(ride_count_member) FROM user_station_merged);

-- create table, stat_casual(OR member)_station_filtered_sorted, which 
-- contains ride count of every station that has ride count >= mean ride count
-- of each rider type, and its rows are sorted in descending order of 
-- casual(OR member) ride count percentages,
CREATE TABLE `my-project-41210.bike_share.stat_casual_station_filtered_sorted` AS
SELECT *
FROM user_station_filtered
ORDER BY ride_count_perct_casual DESC;

CREATE TABLE `my-project-41210.bike_share.stat_member_station_filtered_sorted` AS
SELECT *
FROM user_station_filtered
ORDER BY ride_count_perct_member DESC;

